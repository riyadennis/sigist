services:
  db-kafka:
    container_name: db-kafka
    image: bitnami/kafka:latest
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_BROKER_ID=1
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://db-kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_NUM_PARTITIONS=2
      - KAFKA_ENABLE_KRAFT=no
    depends_on:
      - zookeeper
    volumes:
      - data-kafka:/bitnami/kafka
    networks:
      datapipe:
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:latest
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - data-zookeeper:/bitnami/zookeeper
    tmpfs: "/datalog"
    networks:
      datapipe:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.6.0
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=db-kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - LOGGING_LEVEL_ROOT=error
      - LOGGING_LEVEL_COM_PROVECTUS=error
      - KAFKA_CLUSTERS_0_JMXPORT=9997
    networks:
      datapipe:
    ports:
      - '9019:8080'
  graphql-service:
    container_name: graphql-service
    build:
      context: ../graphql-service
      dockerfile: ../graphql-service/Dockerfile
    depends_on:
      - db-kafka
    ports:
        - '4000:4000'
    environment:
      - LOG_LEVEL=debug
      - PORT=:4000
      - ENVIRONMENT=dev
      - KAFKA_BROKER=db-kafka:9092
      - KAFKA_TOPIC=data-pipe
      - DB_FILE=user-feedback.sqlite
    networks:
      datapipe:
    volumes:
      - "./db/user-feedback.sqlite:/user-feedback.sqlite"
  rest-service:
    container_name: rest-service
    build:
      context: ../rest-service
      dockerfile: ../rest-service/Dockerfile
    depends_on:
      - graphql-service
    ports:
      - '8080:8080'
    environment:
      - LOG_LEVEL=debug
      - PORT=:8080
      - ENVIRONMENT=dev
      - DB_FILE=feedback.sqlite
    networks:
      datapipe:
    volumes:
      - "./db/feedback.sqlite:/feedback.sqlite"
  benthos:
    container_name: benthos
    image: jeffail/benthos:4.7.0
    command:
       - -c
       - config.yaml
    depends_on:
      - rest-service
    volumes:
      - "./benthos/kafka-consumer.yaml:/config.yaml"
    networks:
      datapipe:
volumes:
  data-kafka:
  data-zookeeper:
networks:
  datapipe:
    driver: bridge
