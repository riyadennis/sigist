package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"encoding/json"
	"time"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/google/uuid"
	"github.com/riyadennis/sigist/graphql-service/graph/generated"
	"github.com/riyadennis/sigist/graphql-service/graph/model"
	"go.uber.org/zap"
)

// SaveUserFeedback is the resolver for the SaveUserFeedback field.
func (r *mutationResolver) SaveUserFeedback(ctx context.Context, input model.UserFeedbackInput) (*model.UserFeedback, error) {
	createdAt := time.Now().Format(time.RFC3339)
	id := uuid.New().String()

	res, err := saveUserFeedback(r.db, input, id, createdAt)
	if err != nil {
		r.logger.Error("failed to execute statement", zap.Error(err))
		return nil, err
	}
	rows, err := res.RowsAffected()
	if err != nil {
		r.logger.Error("failed to fetch result from db after saving feedback", zap.Error(err))
		return nil, err
	}

	if rows == 0 {
		return nil, ErrorFailedToSaveUser
	}

	feedback := &model.UserFeedback{
		ID:        &id,
		Email:     &input.Email,
		FirstName: &input.FirstName,
		LastName:  &input.LastName,
		JobTitle:  input.JobTitle,
		Feedback:  &input.Feedback,
		CreateAt:  &createdAt,
	}

	kafkaData, err := json.Marshal(feedback)
	if err != nil {
		r.logger.Error("failed to marshal feedback", zap.Error(err))
		return nil, err
	}
	message := &kafka.Message{
		TopicPartition: kafka.TopicPartition{Topic: &r.KafkaConfig.Topic, Partition: kafka.PartitionAny},
		Value:          kafkaData,
		Headers:        []kafka.Header{{Key: id, Value: []byte("header values are binary")}},
	}

	r.KafkaConfig.Producer.Produce(message, nil)
	return feedback, nil
}

// GetUserFeedback is the resolver for the GetUserFeedback field.
func (r *queryResolver) GetUserFeedback(ctx context.Context, filter model.FilterInput) ([]*model.UserFeedback, error) {
	var userFeedbacks []*model.UserFeedback

	rows, err := getUserRows(r.db, filter)
	if err != nil {
		r.logger.Error("failed to execute query", zap.Error(err))
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		user := model.UserFeedback{}
		err := rows.Scan(
			&user.ID, &user.FirstName,
			&user.LastName, &user.Email,
			&user.JobTitle, &user.Feedback,
			&user.CreateAt,
		)
		if err != nil {
			r.logger.Error("failed to scan row", zap.Error(err))
			return nil, err
		}
		userFeedbacks = append(userFeedbacks, &user)
	}
	return userFeedbacks, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func (r *userResolver) ID(ctx context.Context, obj *model.User) (*string, error) {
	return &obj.ID, nil
}

type userResolver struct{ *Resolver }
