package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"time"

	"github.com/riyadennis/sigist/graphql-service/graph/generated"
	"github.com/riyadennis/sigist/graphql-service/graph/model"
	"go.uber.org/zap"
)

// SaveUser is the resolver for the saveUser field.
func (r *mutationResolver) SaveUser(_ context.Context, input model.CreateUserInput) (*model.User, error) {
	createdAt := time.Now().Format(time.RFC3339)
	res, err := saveUser(r.db, input, createdAt)
	if err != nil {
		r.logger.Error("failed to execute statement", zap.Error(err))
		return nil, err
	}
	userID, err := res.LastInsertId()
	return &model.User{
		ID:        userID,
		Email:     input.Email,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		JobTitle:  *input.JobTitle,
		CreateAt:  createdAt,
	}, nil
}

// GetUser is the resolver for the GetUser field.
func (r *queryResolver) GetUser(_ context.Context, filter model.FilterInput) ([]*model.User, error) {
	var users []*model.User

	rows, err := getUserRows(r.db, filter)
	if err != nil {
		r.logger.Error("failed to execute query", zap.Error(err))
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.FirstName, &user.LastName, &user.Email, &user.JobTitle, &user.CreateAt)
		if err != nil {
			r.logger.Error("failed to scan row", zap.Error(err))
			return nil, err
		}
		users = append(users, &user)
	}
	return users, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.ID != 0 {
		id := fmt.Sprintf("%d", obj.ID)
		return &id, nil
	}
	return nil, nil
}

// FirstName is the resolver for the firstName field.
func (r *userResolver) FirstName(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.FirstName != "" {
		return &obj.FirstName, nil
	}

	return nil, nil
}

// LastName is the resolver for the lastName field.
func (r *userResolver) LastName(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.LastName != "" {
		return &obj.LastName, nil
	}

	return nil, nil
}

// Email is the resolver for the email field.
func (r *userResolver) Email(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.Email != "" {
		return &obj.Email, nil
	}

	return nil, nil
}

// JobTitle is the resolver for the jobTitle field.
func (r *userResolver) JobTitle(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.JobTitle != "" {
		return &obj.JobTitle, nil
	}

	return nil, nil
}

// CreateAt is the resolver for the createAt field.
func (r *userResolver) CreateAt(_ context.Context, obj *model.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	if obj.CreateAt != "" {
		return &obj.CreateAt, nil
	}

	return nil, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
