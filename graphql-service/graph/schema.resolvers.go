package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.32

import (
	"context"
	"encoding/json"
	"time"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/google/uuid"
	"github.com/riyadennis/sigist/graphql-service/graph/generated"
	"github.com/riyadennis/sigist/graphql-service/graph/model"
	"go.uber.org/zap"
)

// SaveUser is the resolver for the saveUser field.
func (r *mutationResolver) SaveUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	createdAt := time.Now().Format(time.RFC3339)
	userID := uuid.New().String()

	res, err := saveUser(r.db, input, userID, createdAt)
	if err != nil {
		r.logger.Error("failed to execute statement", zap.Error(err))
		return nil, err
	}
	rows, err := res.RowsAffected()
	if err != nil {
		r.logger.Error("failed to fetch result from db after saving user", zap.Error(err))
		return nil, err
	}

	if rows == 0 {
		return nil, ErrorFailedToSaveUser
	}

	user := &model.User{
		ID:        userID,
		Email:     input.Email,
		FirstName: input.FirstName,
		LastName:  input.LastName,
		JobTitle:  *input.JobTitle,
		CreateAt:  createdAt,
	}

	kafkaData, err := json.Marshal(user)
	if err != nil {
		r.logger.Error("failed to marshal user", zap.Error(err))
		return nil, err
	}
	message := &kafka.Message{
		TopicPartition: kafka.TopicPartition{Topic: &r.KafkaConfig.Topic, Partition: kafka.PartitionAny},
		Value:          kafkaData,
		Headers:        []kafka.Header{{Key: userID, Value: []byte("header values are binary")}},
	}

	r.KafkaConfig.Producer.Produce(message, nil)
	return user, nil
}

// GetUser is the resolver for the GetUser field.
func (r *queryResolver) GetUser(ctx context.Context, filter model.FilterInput) ([]*model.User, error) {
	var users []*model.User

	rows, err := getUserRows(r.db, filter)
	if err != nil {
		r.logger.Error("failed to execute query", zap.Error(err))
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.FirstName, &user.LastName, &user.Email, &user.JobTitle, &user.CreateAt)
		if err != nil {
			r.logger.Error("failed to scan row", zap.Error(err))
			return nil, err
		}
		users = append(users, &user)
	}
	return users, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *model.User) (*string, error) {
	return &obj.ID, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
